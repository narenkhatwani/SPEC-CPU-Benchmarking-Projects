#------------------------------------------------------------------------------
# SPEC CPU(R) v8 config for gcc/g++/gfortran on Linux (Little-Endian) / IBM POWER
#------------------------------------------------------------------------------
#
# Usage: (1) Copy this to a new name
#             cd $SPEC/config
#             cp Example-x.cfg myname.cfg
#        (2) Change items that are marked 'EDIT' (search for it)
#
# SPEC tested this config file with:
#    Compiler version(s):    tbd.  Unlikely to work with anything before GCC 8
#    Operating system(s):    tbd
#    Hardware:               tbd
#
# Note that this config file supports only 64-bit compiles.
#
# If your system differs, this config file might not work.
# You might find a better config file at https://www.spec.org/cpuv8/results
#
# Note: Older GCC
#
#   Please use the newest GCC that you can. The default version packaged with
#   your operating system may be very old; look for alternate packages with a
#   newer version.
#   *** This config file will definitely fail with GCC 7 and earlier. ***
#
# Unexpected errors?  Try using a newer version of GCC,
#                     or try reducing the optimization level,
#                     or try removing:
#                           -mcpu=
#
# Compiler issues: Contact your compiler vendor, not SPEC.
# For SPEC help:   https://www.spec.org/cpu2017/Docs/techsupport.html
#------------------------------------------------------------------------------


#--------- Label --------------------------------------------------------------
# Arbitrary string to tag binaries (no spaces allowed)
#                  Two Suggestions: # (1) EDIT this label as you try new ideas.
%define label "mytest"              # (2)      Use a label meaningful to *you*.


#--------- Preprocessor -------------------------------------------------------
%ifndef %{build_ncpus}         # EDIT to adjust number of simultaneous compiles.
%   define  build_ncpus 8      #      Or, you can set it on the command line:
%endif                         #      'runcpu --define build_ncpus=nn'

# Don't change this part.
%define    model        -m64
%ifdef %{bits}
%   if %{bits} == 64
%      info .
%      info Note: For this config file, you do not need '--define bits'
%      info .     because PowerPC64 Little-Endian ABI is always 64-bit.
%      info .
%   else
%      error This config file always uses 64 bits.  Please remove your setting for 'bits'.
%   endif
%endif
%if %{label} =~ m/ /
%   error Your label "%{label}" contains spaces.  Please try underscores instead.
%endif
%if %{label} !~ m/^[a-zA-Z0-9._-]+$/
%   error Illegal character in label "%{label}".  Please use only alphanumerics, underscore, hyphen, and period.
%endif


#--------- Global Settings ----------------------------------------------------
# For info, see:
#            https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example: https://www.spec.org/cpu2017/Docs/config.html#tune

default:
   bench_post_setup     = sync
   command_add_redirect = 1
   flagsurl             = $[top]/config/flags/gcc.xml
   ignore_errors        = 1
   iterations           = 1
   label                = %{label}-m64
   line_width           = 1020
   log_line_width       = 1020
   makeflags            = --jobs=%{build_ncpus}
   mean_anyway          = 1
   output_format        = txt,html,cfg,pdf,csv
   preenv               = 1
   reportable           = 0
   tune                 = base


#--------- How Many CPUs? -----------------------------------------------------
# Both SPECrate and SPECspeed can test multiple chips / cores / hw threads
#    - For SPECrate,  you set the number of copies.
#    - For SPECspeed, you set the number of threads.
# See: https://www.spec.org/cpu2017/Docs/system-requirements.html#MultipleCPUs
#
#    q. How many should I set?
#    a. Unknown, you will have to try it and see!
#
# To get you started, some suggestions:
#
#     copies - This config file defaults to testing only 1 copy.   You might
#              try changing it to match the number of cores on your system,
#              or perhaps the number of virtual CPUs as reported by:
#                     grep -c processor /proc/cpuinfo
#              Be sure you have enough memory.  See:
#              https://www.spec.org/cpu2017/Docs/system-requirements.html#memory
#
#     threads - This config file sets a starting point, which you can adjust.
#               A higher thread count is much more likely to be useful for
#               fpspeed than for intspeed.
#
default:
   copies                 = 1       # EDIT to change number of copies (see above)
   threads                = 2       # EDIT to change number of OpenMP threads (see above)


#------- Compilers ------------------------------------------------------------
default:
#  EDIT: The parent directory for your compiler.
#        Do not include the trailing /bin/
#        Do not include a trailing slash
#  Examples:
#   1  On a Red Hat system, you said:
#      'dnf install gcc-toolset-10'
#      Use:                 %   define gcc_dir "/opt/rh/gcc-toolset-10/root/usr"
#
#   2  You built GCC in:                        /disk1/mybuild/gcc-11.2.0/bin/gcc
#      Use:                 %   define gcc_dir "/disk1/mybuild/gcc-11.2.0"
#
#   3  You want:                                /usr/bin/gcc
#      Use:                 %   define gcc_dir "/usr"
#      WARNING: The system GCC may be too old to work with this benchmark suite
#               See note about Older GCC above
#
%ifndef %{gcc_dir}
%   define  gcc_dir        "/opt/rh/gcc-toolset-10/root/usr"  # EDIT (see above)
%endif

# EDIT: If your compiler version is less than 10, comment out
#       the next line to avoid compile errors for Fortran benchmarks
#
%define GCCge10  # EDIT: comment out if using GCC 9 or earlier

# EDIT if needed: the preENV line adds library directories to the runtime
#      path.  You can adjust it, or add lines for other environment variables.
#      See: https://www.spec.org/cpu2017/Docs/config.html#preenv
#      and: https://gcc.gnu.org/onlinedocs/gcc/Environment-Variables.html
   #preENV_LD_LIBRARY_PATH = %{gcc_dir}/lib64/:/lib64
   #preENV_LD_LIBRARY_PATH = %{gcc_dir}/lib64/:/lib64:%{ENV_LD_LIBRARY_PATH}
   LIBS                    = -L%{gcc_dir}/lib64 -Wl,-rpath,%{gcc_dir}/lib64
   SPECLANG                = %{gcc_dir}/bin/
   CC                      = $(SPECLANG)gcc      -std=c18     %{model} # See note "Older GCC" above
   CXX                     = $(SPECLANG)g++      -std=c++17   %{model}
   FC                      = $(SPECLANG)gfortran -std=f2008   %{model}
   # How to say "Show me your version, please"
   CC_VERSION_OPTION       = --version
   CXX_VERSION_OPTION      = --version
   FC_VERSION_OPTION       = --version

default:
   sw_base_ptrsize = 64-bit
   sw_peak_ptrsize = 64-bit


#--------- Portability --------------------------------------------------------
default:               # data model applies to all benchmarks
EXTRA_PORTABILITY = -DSPEC_LP64

706.stockfish_r,727.cppcheck_r,735.gem5_r,738.diamond_r,746.minizinc_r,747.sampleflow_r,752.whisper_r,801.xz_s,806.stockfish_s,827.cppcheck_s,829.abc_s,838.diamond_s,847.sampleflow_s,852.whisper_s:
   PORTABILITY = -pthread

723.llvm_r:
   PORTABILITY = -pthread -flifetime-dse=1

# XXX TEMPORARY ##############################################################
#     It is highly desirable that SPEC CPU benchmarks work with the relevant #
#     language standards, rather than requiring non-standard dialects.       #
733.mlpack_r:                                                                #
   FPORTABILITY     = -std=gnu         # For now                             #
   PORTABILITY_LIBS = -lgfortran       # LD uses C++ (this flag seems ok)    #
# XXX TEMPORARY ##############################################################

# XXX TEMPORARY ##############################################################
#     -fno-fast-math is needed since std::isnan is used widely in 734.vpr_r. #
#     More info available in email cpuv8devel-653.                           #
#     This is marked TEMPORARY because SPEC CPU rules for "base" require     #
#     optimization (and de-optimization) flags to be set consistently for    #
#     all modules of a given language in a suite.                            #
734.vpr_r,834.vpr_s:                                                         #
   PORTABILITY = -pthread -fno-fast-math                                     #
# XXX TEMPORARY ##############################################################

# XXX TEMPORARY ###############################################################
#     Flags needed for 737.gmsh_r/src/gmsh/numeric/robustPredicates.cpp which #
#     has a lot of comments explaining why IEEE strictness is required for    #
#     functionality and algorithm convergence. Other files don't need this.   #
#     More info available at http://www.cs.cmu.edu/~quake/robust.html         #
#     This is marked TEMPORARY because SPEC CPU rules for "base" require that #
#     optimization (and de-optimization) flags must be set consistently for   #
#     all modules of a given language in a suite.                             #
737.gmsh_r,837.gmsh_s:                                                        #
   PORTABILITY = -fno-fast-math                                               #
# XXX TEMPORARY ###############################################################

743.lua_r:
   PORTABILITY = -DLUA_USE_LINUX

745.brotli_r:
   PORTABILITY = -DOS_LINUX

# original program sources insist on correct math
748.flightdm_r:
   PORTABILITY = -fno-fast-math

#----------------------------------------------------------------------
#       GCC workarounds that do not count as PORTABILITY
#----------------------------------------------------------------------
# The workarounds in this section would not qualify under the SPEC CPU
# PORTABILITY rule.
#   - In peak, they can be set as needed for individual benchmarks.
#   - In base, individual settings are not allowed; set for whole suite.
# See:
#     https://www.spec.org/cpu2017/Docs/runrules.html#portability
#     https://www.spec.org/cpu2017/Docs/runrules.html#BaseFlags
#
%ifdef %{GCCge10}
   default:
         EXTRA_FFLAGS = -fallow-argument-mismatch
%endif

#-------- Tuning Flags common to Base and Peak --------------------------------
#
# Speed (OpenMP and Autopar allowed)
#
specspeed:
   EXTRA_OPTIMIZE    = -fopenmp -DSPEC_OPENMP
   preENV_OMP_STACKSIZE = 192M

#--------  Base Tuning Flags ----------------------------------------------
# EDIT if needed -- If you run into errors, you may need to adjust the
#                   optimization. See note on "Older GCC" above.
#
default=base:         # flags for all base
   OPTIMIZE    = -g -O3 -mcpu=power8


#--------  Peak Tuning Flags ----------------------------------------------
default=peak:
   OPTIMIZE    = -Ofast -mcpu=power8 -funroll-loops -mrecip=all


#------------------------------------------------------------------------------
# Tester and System Descriptions - EDIT all sections below this point
#------------------------------------------------------------------------------
#   For info about any field, see
#             https://www.spec.org/cpu2017/Docs/config.html#fieldname
#   Example:  https://www.spec.org/cpu2017/Docs/config.html#hw_memory
#-------------------------------------------------------------------------------

#--------- EDIT to match your version -----------------------------------------
default:
   sw_compiler001   = C/C++/Fortran: Version 11.2.0 of GCC, the
   sw_compiler002   = GNU Compiler Collection

#--------- EDIT info about you ------------------------------------------------
# To understand the difference between hw_vendor/sponsor/tester, see:
#     https://www.spec.org/cpu2017/Docs/config.html#test_sponsor
specrate,specspeed:
   hw_vendor          = My Corporation
   tester             = My Corporation
   test_sponsor       = My Corporation
   license_num        = nnn (Your SPEC license number)
#  prepared_by        = # Ima Pseudonym                       # Whatever you like: is never output


#--------- EDIT system availability dates -------------------------------------
specrate,specspeed:
                        # Example                             # Brief info about field
   hw_avail           = # Nov-2099                            # Date of LAST hardware component to ship
   sw_avail           = # Nov-2099                            # Date of LAST software component to ship
   fw_bios            = # Version Mumble released May-2099    # Firmware information

#--------- EDIT system information --------------------------------------------
specrate,specspeed:
                        # Example                             # Brief info about field
 # hw_cpu_name        = # Intel Xeon E9-9999 v9               # chip name
   hw_cpu_nominal_mhz = # 9999                                # Nominal chip frequency, in MHz
   hw_cpu_max_mhz     = # 9999                                # Max chip frequency, in MHz
 # hw_disk            = # 9 x 9 TB SATA III 9999 RPM          # Size, type, other perf-relevant info
   hw_model           = # TurboBlaster 3000                   # system model name
 # hw_nchips          = # 99                                  # number chips enabled
   hw_ncores          = # 9999                                # number cores enabled
   hw_ncpuorder       = # 1-9 chips                           # Ordering options
   hw_nthreadspercore = # 9                                   # number threads enabled per core
   hw_other           = # TurboNUMA Router 10 Gb              # Other perf-relevant hw, or "None"

#  hw_memory001       = # 999 GB (99 x 9 GB 2Rx4 PC4-2133P-R, # The 'PCn-etc' is from the JEDEC
#  hw_memory002       = # running at 1600 MHz)                # label on the DIMM.

   hw_pcache          = # 99 KB I + 99 KB D on chip per core  # Primary cache size, type, location
   hw_scache          = # 99 KB I+D on chip per 9 cores       # Second cache or "None"
   hw_tcache          = # 9 MB I+D on chip per chip           # Third  cache or "None"
   hw_ocache          = # 9 GB I+D off chip per system board  # Other cache or "None"

 # sw_file            = # ext99                               # File system
 # sw_os001           = # Linux Sailboat                      # Operating system
 # sw_os002           = # Distribution 7.2 SP1                # and version
   sw_other           = # TurboHeap Library V8.1              # Other perf-relevant sw, or "None"
 # sw_state           = # Run level 99                        # Software state.

   power_management   = # briefly summarize power settings

# Note: Some commented-out fields above are automatically set to preliminary
# values by sysinfo
#       https://www.spec.org/cpu2017/Docs/config.html#sysinfo
# Uncomment lines for which you already know a better answer than sysinfo
